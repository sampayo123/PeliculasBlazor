@inject IMostrarMensajes mostrarMensajes

@for (int i = 1; i <= MaximoPuntaje; i++)
{
    var numeroEstrella = i;
    <span @onclick="@(() => onclickHandle(numeroEstrella))"
          @onmouseover="@(() => onmouseoverHandle(numeroEstrella))"
          style="cursor:pointer"
          class="fa fa-star @(PuntajeSeleccionado >= i ? "checked": null)"></span>
}

@code {
    [Parameter] public int MaximoPuntaje { get; set; }
    [Parameter] public int PuntajeSeleccionado { get; set; }
    [Parameter] public EventCallback<int> OnVote { get; set; }
    [CascadingParameter] public Task<AuthenticationState> authenticationState { get; set; }
    private bool votado = false;

    private async Task onclickHandle(int numeroEstrella)
    {
        var authState = await authenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            PuntajeSeleccionado = numeroEstrella;
            votado = true;
            await OnVote.InvokeAsync(PuntajeSeleccionado);
        }
        else
        {
            await mostrarMensajes.MostrarMensajeError("Debe de loguearse o registrarse para poder votar");
        }
    }

    private void onmouseoverHandle(int numeroEstrella)
    {
        if (!votado)
        {
            PuntajeSeleccionado = numeroEstrella;
        }
    }
}
